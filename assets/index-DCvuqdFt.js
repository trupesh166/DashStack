import{U as I,r as a,_ as d,L as b,M as x,N as F,O as _}from"./index-IeyI_kC-.js";const k=r=>{const{societyId:l}=I(),[e,o]=a.useState({complainerName:"",complaintName:"",description:"",wing:"",unit:"",priority:"Medium",status:"Pending"}),[c,n]=a.useState(!1),[u,t]=a.useState(!1),[p,i]=a.useState(!1),[C,S]=a.useState(null),h=()=>{w(),t(!0)},D=s=>{S(s._id),o({complainerName:s.complainerName,complaintName:s.complaintName,description:s.discription,wing:s.wingId._id,unit:s.unitId._id,priority:s.priorityStatus,status:s.status}),i(!0),t(!0)},N=()=>{w(),t(!1)},w=()=>{o({complainerName:"",complaintName:"",description:"",wing:"",unit:"",priority:"Medium",status:"Pending"}),S(null),i(!1)};return{formData:e,handleChange:(s,m)=>{o(f=>({...f,[s]:m}))},isSubmitting:c,isModalOpen:u,openCreateModal:h,openEditModal:D,closeModal:N,handleSubmit:async s=>{if(!l)return;const{complainerName:m,complaintName:f,description:E,wing:M,unit:L}=e;if(!m||!f||!E||!M||!L){d.error("Please fill in all required fields.");return}n(!0),console.log("formData ====> ",e);const g={societyId:l,complainerName:e.complainerName,complaintName:e.complaintName,discription:e.description,wingId:e.wing,unitId:e.unit,priorityStatus:e.priority,status:e.status,complaintype:e.status,complaintype:s};try{C?(await b(C,g)).message==="Success"&&d.success("Complaint updated successfully."):(console.log("create data ====> ",g),(await x({...g})).message==="Success"&&d.success("Complaint created successfully.")),r&&r(),N()}catch(y){console.error("Error submitting complaint:",y),d.error("Failed to submit complaint.")}finally{n(!1)}},isEdit:p}},q=r=>{const[l,e]=a.useState([]),[o,c]=a.useState(!1),{societyId:n}=I(),u=async()=>{if(n)try{c(!0);let t=await F({societyId:n,type:r});console.log("response ====> ",t),t=t==null?void 0:t.data,e(t)}catch(t){console.error("Failed to fetch Note:",t)}finally{c(!1)}};return a.useEffect(()=>{u()},[n]),{dataListComplaint:l,fetchListComplaint:u,isLoading:o}},A=r=>{const[l,e]=a.useState(!1),[o,c]=a.useState(null),[n,u]=a.useState(!1);return{complaintDelete:async p=>{try{e(!0);const i=await _(p);if(e(!1),i.message="success")return d.success("Expense Is Delete Successfully"),r(),{success:!0};throw new Error("Failed to delete expense")}catch(i){return e(!1),console.error("Error deleting expense:",i),{success:!1,error:i}}},loading:l,deleteComplaintData:o,setDeleteComplaintData:c,showDeleteModal:n,setShowDeleteModal:u}};export{k as a,A as b,q as u};
